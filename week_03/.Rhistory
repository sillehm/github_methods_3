# model for each participant
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
# extracting fitted values from the model from each participant
fitted <- model1$fitted.values
# new df containing the fitted values and target contrast
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
# another new df containing hypothetical target contrast values and subject number
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i)))
colnames(newdf) <- c('target.contrast', 'subject')
# adding the predicted values for the hypothetical target contrast values
newdf$predictmod <- predict(model, type = 'response', newdata = newdf)
# plotting
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
# Making function to run a model for each participant and plotting the estimated functions for each participant
partialpoolfun <- function(i){
# new df for each participant
dat <- staircase[which(staircase$subject == i),]
# model for each participant
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
# extracting fitted values from the model from each participant
fitted <- model1$fitted.values
# new df containing the fitted values and target contrast
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
# another new df containing hypothetical target contrast values and subject number
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i)))
colnames(newdf) <- c('target.contrast', 'subject')
# adding the predicted values for the hypothetical target contrast values
newdf$predictmod <- predict(model, type = 'response', newdata = newdf)
# plotting
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 8), axis.title=element_text(size = 6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
# Making function to run a model for each participant and plotting the estimated functions for each participant
partialpoolfun <- function(i){
# new df for each participant
dat <- staircase[which(staircase$subject == i),]
# model for each participant
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
# extracting fitted values from the model from each participant
fitted <- model1$fitted.values
# new df containing the fitted values and target contrast
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
# another new df containing hypothetical target contrast values and subject number
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i)))
colnames(newdf) <- c('target.contrast', 'subject')
# adding the predicted values for the hypothetical target contrast values
newdf$predictmod <- predict(model, type = 'response', newdata = newdf)
# plotting
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
# New df only containing staircase
staircase <- lau %>%
filter(lau$trial.type == 'staircase')
# Making a function to run a model for each participant
nopoolfun <- function(i){
dat <- staircase[which(staircase$subject == i),]
model <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
fitted <- model$fitted.values
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
# Running the function for every participant
for (participant in 1:29){
nopoolfun(participant)
}
subjects <- c(1:15)
plots <- lapply(subjects, FUN=nopoolfun)
do.call(grid.arrange,  plots)
subjects <- c(16:29)
plots <- lapply(subjects, FUN=nopoolfun)
require(gridExtra)
do.call(grid.arrange,  plots)
lapply(qqfun, c(3,7,17,28))
subjects <- c(3,7,17,28)
lapply(qqfun, subjects)
lapply(subjects, qqfun)
lapply(subjects, qqfunlog)
exp(m5$coefs)
exp(m5$coef)
exp(coef(m5))
exp(coef[1](m5))
exp(m5$coef)
m5 <- lmer(log(rt.obj) ~ task + (1+task|subject) + (1|trial), lau_exp, REML = F)
exp(-0.07225)
exp(-0.07225)
exp(-0.17868)
# extracting
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- m5@beta
estimatesExp <- exp(m5@beta)
mtable <- as_tibble(cbind(model_text,estimates,estimatesExp))
mtable
summary(multi_model)
# extracting estimates
model_text <- c("Intercept", "Quadruplet", "Singles", )
# extracting estimates
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(multi_model@beta[1], multi_model@beta[5], multi_model@beta[6])
estimatesExp <- c(exp(multi_model@beta[1]), exp(multi_model@beta[5]), exp(multi_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
# extracting estimates
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(multi_model@beta[1], multi_model@beta[5], multi_model@beta[6])
estimatesExp <- c(exp(multi_model@beta[1]), exp(multi_model@beta[5]), exp(multi_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates <- c(multi_model@beta[7], multi_model@beta[8], multi_model@beta[9], multi_model@beta[10], multi_model@beta[11], multi_model@beta[12])
estimatesExp <- c(exp(multi_model@beta[1]), exp(multi_model@beta[5]), exp(multi_model@beta[6]), exp(multi_model@beta[10]), exp(multi_model@beta[11]), exp(multi_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text,estimates,estimatesExp))
interactiontable
count4 <- lau_count %>% filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
count4$predicted <- predict(multi_model, newdata=count4)
gplotc(ount4, aes(y = predicted, x = pas)) +
geom_bar(stat = 'identity') +
facet_wrap(~ subject)
count4 <- lau_count %>% filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
count4$predicted <- predict(multi_model, newdata=count4)
gplot(count4, aes(y = predicted, x = pas)) +
geom_bar(stat = 'identity') +
facet_wrap(~ subject)
count4 <- lau_count %>% filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
count4$predicted <- predict(multi_model, newdata=count4)
ggplot(count4, aes(y = predicted, x = pas)) +
geom_bar(stat = 'identity') +
facet_wrap(~ subject)
count4 <- lau_count %>% filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
count4$predicted <- predict(multi_model, newdata=count4)
ggplot(count4, aes(y = predicted, x = pas, colour=pas)) +
geom_bar(stat = 'identity') +
facet_wrap(~ subject)
count4 <- lau_count %>% filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
count4$predicted <- predict(multi_model, newdata=count4)
ggplot(count4, aes(y = predicted, x = pas, colour=pas, fill=pas)) +
geom_bar(stat = 'identity') +
facet_wrap(~ subject)
# Making function to run a model for each participant and plotting the estimated functions for each participant
partialpoolfun <- function(i){
# new df for each participant
dat <- staircase[which(staircase$subject == i),]
# model for each participant
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
# extracting fitted values from the model from each participant
fitted <- model1$fitted.values
# new df containing the fitted values and target contrast
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
# another new df containing hypothetical target contrast values and subject number
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i)))
colnames(newdf) <- c('target.contrast', 'subject')
# adding the predicted values for the hypothetical target contrast values
newdf$predictmod <- predict(model, type = 'response', newdata = newdf)
# plotting
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Paticipant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
which(lau)
e^0.7
1/exp(0.2)
exp(0.2)
# extracting estimates
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(multi_model@beta[1], multi_model@beta[5], multi_model@beta[6])
estimatesExp <- c(exp(multi_model@beta[1]), exp(multi_model@beta[5]), exp(multi_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates <- c(multi_model@beta[7], multi_model@beta[8], multi_model@beta[9], multi_model@beta[10], multi_model@beta[11], multi_model@beta[12])
estimatesExp <- c(exp(multi_model@beta[7]), exp(multi_model@beta[8]), exp(multi_model@beta[9]), exp(multi_model@beta[10]), exp(multi_model@beta[11]), exp(multi_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text,estimates,estimatesExp))
interactiontable
m1 <- glmer(correct ~ task + (1 + subject), family = "binomial", data = lau_exp)
m1 <- glmer(correct ~ task + (1 | subject), family = "binomial", data = lau_exp)
summary(m1)
m2 <- glmer(correct ~ task + pas + (1 | subject), family = "binomial", data = lau_exp)
summary(m2)
m3 <- glmer(correct ~ pas + (1 | subject), family = "binomial", data = lau_exp)
m4 <- glmer(correct ~ task*pas + (1 | subject), family = "binomial", data = lau_exp)
View(m2)
var.test(m4)
var(m4)
var(m3, m4)
estimated <- predict(m1, lau_exp, type='class')
estimated <- predict(m1, lau_exp, type='response')
tabm1 <- table(lau_exp$correct, estbrand)
tabm1 <- table(lau_exp$correct, estimated)
tabm1
View(lau_exp)
estcorrectm1 <- predict(m1, lau_exp, type='response')
estcorrectm1 <- ifelse(estcorrectm1 > 0.5, 1, 0)
tabm1 <- table(lau_exp$correct, m1)
estcorrectm1 <- predict(m1, lau_exp, type='response')
estcorrectm1 <- ifelse(m1 > 0.5, 1, 0)
estcorrectm1 <- predict(m1, lau_exp, type='response')
estcorrectm1 <- ifelse(estcorrectm1 > 0.5, 1, 0)
tabm1 <- table(lau_exp$correct, estcorrectm1)
tabm1
estcorrectm1 <- predict(m1, lau_exp, type='response')
estcorrectm1 <- ifelse(estcorrectm1 > 0.5, 1, 0)
tabm1 <- table(lau_exp$correct, estcorrectm1)
tabm1
estcorrectm1 <- predict(m1, lau_exp, type='response')
estimated <- predict(m1, lau_exp, type='response')
ifelse(estimated < 0.5, "0", "1")
estimated <- predict(m1, lau_exp, type='response')
estimated <- ifelse(estimated < 0.5, "0", "1")
estimated <- predict(m1, lau_exp, type='response')
estimated <- ifelse(estimated < 0.5, 0, 1)
tabm1 <- table(lau_exp$correct, estimated)
tabm1
logcorrectpasm1 <- glmer(correct ~ pas + (1 | subject), data = exp, family = 'binomial')
logcorrectpasm1 <- glmer(correct ~ pas + (1 | subject), data = lau_exp, family = 'binomial')
estcorrectm1 <- predict(logcorrectpasm1, lau_exp, type='response')
estcorrectm1 <- ifelse(estcorrectm1 > 0.5, 1, 0)
tabm1 <- table(lau_exp$correct, estcorrectm1)
tabm1
accuracyfun(m1, lau_exp)
accuracyfun <- function(model, data) {
predicted <- predict(model, data, type='response')
predicted <- ifelse(predicted > 0.5, 1, 0)
tab <-  table(data$correct, predicted)
accuracy <- (tab[1,1] + tab[2,2])/(tab[1,1] + tab[2,2] +tab[1,2] + tab[2,1])
return(accuracy)
}
accuracyfun(m1, lau_exp)
m1 <- glmer(correct ~ task + (1 | subject), family = "binomial", data = lau_exp)
m2 <- glmer(correct ~ task + pas + (1 | subject), family = "binomial", data = lau_exp)
summary(m2)
m3 <- glmer(correct ~ pas + (1 | subject), family = "binomial", data = lau_exp)
m4 <- glmer(correct ~ task*pas + (1 | subject), family = "binomial", data = lau_exp)
accuracyfun <- function(model, data) {
predicted <- predict(model, data, type='response')
predicted <- ifelse(predicted > 0.5, 1, 0)
tab <-  table(data$correct, predicted)
accuracy <- (tab[1,1] + tab[2,2])/(tab[1,1] + tab[2,2] +tab[1,2] + tab[2,1])
return(accuracy)
}
accuracyfun(m1, lau_exp)
m1 <- glmer(correct ~ task + (1 | subject),  data = lau_exp, family = "binomial")
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/Sillemarkussen/Desktop/github_methods_3/week_03')
pacman::p_load(tidyverse, lme4,dfoptim, gridExtra)
# Making a data frame with the data from experiment 2
lau_files <- list.files(path = "experiment_2",
pattern = ".csv",
full.names = T)
lau <- data.frame() # Creating empty data frame
for (i in 1:length(lau_files)){
new_dat <- read.csv(lau_files[i], header = TRUE)
lau <- rbind(new_dat, lau)
} # Going through each of the files on the list, reading them and them adding them to the data frame
lau$target.type[which(lau$target.type=='even')] <- 'e'
lau$target.type[which(lau$target.type=='odd')] <- 'o'
lau$correct <- ifelse((lau$target.type == lau$obj.resp), 1, 0)
# changing class of the nessecary variables.
lau$trial.type <- as.factor(lau$trial.type)
lau$target.contrast <- as.numeric(lau$target.contrast)
lau$cue <- as.factor(lau$cue)
lau$task <- as.factor(lau$task)
lau$target.type <- as.factor(lau$target.type)
lau$rt.obj <- as.numeric(lau$rt.obj)
lau$rt.subj <- as.numeric(lau$rt.subj)
lau$obj.resp <- as.factor(lau$obj.resp)
lau$subject <- as.factor(lau$subject)
lau$correct <- as.factor(lau$correct)
# New df only containing staircase
staircase <- lau %>%
filter(lau$trial.type == 'staircase')
# Making a function to run a model for each participant
nopoolfun <- function(i){
dat <- staircase[which(staircase$subject == i),]
model <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
fitted <- model$fitted.values
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Participant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
# Running the function for every participant
for (participant in 1:29){
nopoolfun(participant)
}
subjects <- c(1:15)
plots <- lapply(subjects, FUN=nopoolfun)
do.call(grid.arrange,  plots)
subjects <- c(16:29)
plots <- lapply(subjects, FUN=nopoolfun)
require(gridExtra)
do.call(grid.arrange,  plots)
# Building the partial pooling model
model <- glmer(correct ~ target.contrast + (1 + target.contrast | subject), family = 'binomial', data = staircase)
# Making function to run a model for each participant and plotting the estimated functions for each participant
partialpoolfun <- function(i){
# new df for each participant
dat <- staircase[which(staircase$subject == i),]
# model for each participant
model1 <- glm(correct ~ target.contrast, family = 'binomial', data = dat)
# extracting fitted values from the model from each participant
fitted <- model1$fitted.values
# new df containing the fitted values and target contrast
plot_dat <- data.frame(cbind(fitted, 'target.contrast' = dat$target.contrast))
# another new df containing hypothetical target contrast values and subject number
newdf<- data.frame(cbind(seq(0, 1, by = 0.01),rep(i)))
colnames(newdf) <- c('target.contrast', 'subject')
# adding the predicted values for the hypothetical target contrast values
newdf$predictmod <- predict(model, type = 'response', newdata = newdf)
# plotting
plot <- ggplot(plot_dat, aes(x = target.contrast, y = fitted))+
geom_point(colour = "steelblue") +
geom_line(data = newdf, aes(x = target.contrast, y = predictmod)) +
xlab('Target Contrast') +
ylab('Predicted') +
ylim(c(0,1))+
ggtitle(paste0('Participant ', as.character(i))) +
theme_minimal() +
theme(plot.title = element_text(size = 10), axis.title=element_text(size = 8), axis.text=element_text(size=6))
return(plot)
}
subjects <- c(1:16)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
subjects <- c(17:29)
plots <- lapply(subjects, FUN=partialpoolfun)
do.call(grid.arrange,  plots)
# data frame only containing experimental trials
lau_exp <- lau %>%
filter(trial.type=="experiment")
exp4 <- lau_exp %>% filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
exp4$subject <- as.numeric(exp4$subject)
qqfun <- function(i){
interceptmodel <- lm(rt.obj ~ 1, data = exp4, subset = subject == i)
qqnorm(resid(interceptmodel), pch = 1, frame = FALSE)
qqline(resid(interceptmodel), col = "steelblue", lwd = 2)
}
subjects <- c(3,7,17,28)
lapply(subjects, qqfun)
qqfunlog <- function(i){
interceptmodel <- lm(log(rt.obj) ~ 1, data = exp4, subset = subject == i)
qqnorm(resid(interceptmodel), pch = 1, frame = FALSE)
qqline(resid(interceptmodel), col = "steelblue", lwd = 2)
}
lapply(subjects, qqfunlog)
m1 <- lmer(log(rt.obj) ~ task + (1|subject), lau_exp, REML = F)
m2 <- lmer(log(rt.obj) ~ task + (1|subject) + (1|trial), lau_exp, REML = F)
m3 <- lmer(log(rt.obj) ~ task + (1|trial), lau_exp, REML = F)
m4 <- lmer(log(rt.obj) ~ task + (1+task|subject), lau_exp, REML = F)
m5 <- lmer(log(rt.obj) ~ task + (1+task|subject) + (1|trial), lau_exp, REML = F)
model_text <- c("model 1", "model 2", "model 3", "model 4", "model 5")
sigmas <- c(sigma(m1),sigma(m2),sigma(m3), sigma(m4), sigma(m5))
AIC <- c(AIC(m1), AIC(m2), AIC(m3), AIC(m4), AIC(m5))
mtable <- as_tibble(cbind(model_text,sigmas,AIC))
mtable
summary(m5)
m_pas <- lm(log(rt.obj) ~ task*pas, lau_exp, REML = F)
ma <- lmer(log(rt.obj) ~ task + (1|subject) + (1|trial) + (1|cue), lau_exp, REML = F)
mb <- lmer(log(rt.obj) ~ task + (1|subject) + (1|trial) + (1|cue) + (1|target.contrast), lau_exp, REML = F)
mc <- lmer(log(rt.obj) ~ task + (1|subject) + (1|trial) + (1|cue) + (1|target.contrast) + (1|target.type), lau_exp, REML = F)
mb <- lmer(log(rt.obj) ~ task + (1|subject) + (1|trial) + (1|cue) + (1|target.contrast), lau_exp, REML = F)
print(VarCorr(mb), comp='Variance')
lau_count <- lau_exp %>%
group_by(subject, pas, task) %>%
summarise(count=n())
lau_count$pas <- as.factor(lau_count$pas)
multi_model <- glmer(count ~ pas*task + (1 + pas|subject), family = "poisson", data = lau_count, glmerControl(optimizer="bobyqa"))
multi_model2 <- glmer(count ~ pas+task + (1 + pas|subject), family = "poisson", data = lau_count, glmerControl(optimizer="bobyqa"))
AIC(multi_model, multi_model2)
summary(multi_model)
# extracting estimates
model_text <- c("Intercept", "Quadruplet", "Singles")
estimates <- c(multi_model@beta[1], multi_model@beta[5], multi_model@beta[6])
estimatesExp <- c(exp(multi_model@beta[1]), exp(multi_model@beta[5]), exp(multi_model@beta[6]))
tasktable <- as_tibble(cbind(model_text,estimates,estimatesExp))
tasktable
model_text <- c("Pas 2, quadruplet", "Pas 3, quadruplet", "Pas 4, quadruplet","Pas 2, singles", "Pas 3, singles", "Pas 4, singles")
estimates <- c(multi_model@beta[7], multi_model@beta[8], multi_model@beta[9], multi_model@beta[10], multi_model@beta[11], multi_model@beta[12])
estimatesExp <- c(exp(multi_model@beta[7]), exp(multi_model@beta[8]), exp(multi_model@beta[9]), exp(multi_model@beta[10]), exp(multi_model@beta[11]), exp(multi_model@beta[12]))
interactiontable <- as_tibble(cbind(model_text,estimates,estimatesExp))
interactiontable
count4 <- lau_count %>% filter(subject == '3' | subject == '7' | subject == '17' | subject == '28')
count4$predicted <- predict(multi_model, newdata=count4)
ggplot(count4, aes(y = predicted, x = pas, colour=pas, fill=pas)) +
geom_bar(stat = 'identity') +
facet_wrap(~ subject)
m1 <- glmer(correct ~ task + (1 | subject),  data = lau_exp, family = "binomial")
summary(m1)
m2 <- glmer(correct ~ task + pas + (1 | subject), family = "binomial", data = lau_exp)
summary(m2)
m3 <- glmer(correct ~ pas + (1 | subject), family = "binomial", data = lau_exp)
m4 <- glmer(correct ~ task*pas + (1 | subject), family = "binomial", data = lau_exp)
accuracyfun <- function(model, data) {
predicted <- predict(model, data, type='response')
predicted <- ifelse(predicted > 0.5, 1, 0)
tab <-  table(data$correct, predicted)
accuracy <- (tab[1,1] + tab[2,2])/(tab[1,1] + tab[2,2] +tab[1,2] + tab[2,1])
return(accuracy)
}
logcorrectpasm1 <- glmer(correct ~ pas + (1 | subject), data = lau_exp, family = 'binomial')
accuracyfun(logcorrectpasm1, lau_exp)
accuracyfun(m2, lau_exp)
accuracyfun(m3, lau_exp)
accuracyfun(m1, lau_exp)
m1 <- glmer(correct ~ pas + (1 | subject), data = lau_exp, family = 'binomial')
accuracyfun(m1, lau_exp)
m1 <- glmer(correct ~ task + (1 | subject), data = lau_exp, family = 'binomial')
m2 <- glmer(correct ~ task + pas + (1 | subject), family = "binomial", data = lau_exp)
m3 <- glmer(correct ~ pas + (1 | subject), family = "binomial", data = lau_exp)
m4 <- glmer(correct ~ task*pas + (1 | subject), family = "binomial", data = lau_exp)
accuracyfun(m1, lau_exp)
predicted <- predict(m1, lau_exp, type='response')
predicted <- ifelse(predicted > 0.5, 1, 0)
tab <-  table(lau_exp$correct, predicted)
accuracy <- (tab[1,1] + tab[2,2])/(tab[1,1] + tab[2,2] +tab[1,2] + tab[2,1])
lau_exp$predicted <- predict(m1, lau_exp, type='response')
lau_exp$predicted <- ifelse(predicted > 0.5, 1, 0)
accuracyfun(m4, lau_exp)
accuracyfun(m2, lau_exp)
accuracyfun(m3, lau_exp)
accuracyfun <- function(model, data) {
predicted <- predict(model, data, type='response')
predicted <- ifelse(predicted > 0.5, 1, 0)
tab <-  table(data$correct, predicted)
accuracy <- (tab[1,1] + tab[2,2])/(tab[1,1] + tab[2,2] +tab[1,2] + tab[2,1])
return(accuracy)
}
accuracyfun(m4, lau_exp)
accuracyfun(m2, lau_exp)
accuracyfun(m3, lau_exp)
m3 <- glmer(correct ~ pas + (1 | subject), family = "binomial", data = lau_exp)
m4 <- glmer(correct ~ task*pas + (1 | subject), family = "binomial", data = lau_exp)
accuracyfun <- function(model, data) {
predicted <- predict(model, data, type='response')
predicted <- ifelse(predicted > 0.5, 1, 0)
tab <-  table(data$correct, predicted)
accuracy <- (tab[1,1] + tab[2,2])/(tab[1,1] + tab[2,2] +tab[1,2] + tab[2,1])
return(accuracy)
}
accuracyfun(m4, lau_exp)
accuracyfun(m2, lau_exp)
accuracyfun(m3, lau_exp)
