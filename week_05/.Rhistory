summary(pas_m_int)
## testing whether PAS 2 is different from PAS 1
contrast.vector1 <- matrix(c(0, 0, 0, 0, 0, 1, 0, 0), nrow=1)
gh <- glht(pas_m_int, contrast.vector1)
print(summary(gh))
## as another example, we could also test whether there is a difference in
## intercepts between PAS 2 and PAS 3
contrast.vector2 <- matrix(c(0, 0, 0, 0, 0, -1, 1, 0), nrow=1)
gh <- glht(pas_m_int, contrast.vector2)
print(summary(gh))
contrast.vector3 <- matrix(c(0, 0, 0, 0, 0, 0, -1, 1), nrow=1)
gh3 <- glht(pas_m_int, contrast.vector3)
print(summary(gh3))
# looking at the difference of differences
# difference of differences
K <- contrast.vector1 - contrast.vector3
t <- glht(pas_m_int, linfct = K)
summary(t)
RSS <- function(dataset, par)
{
## "dataset" should be a data.frame containing the variables x (target.frames)
## and y (correct)
## "par" are our four parameters (a numeric vector)
a = par[1]
b = par[2]
c = par[3]
d = par[4]
x <- dataset$x
y <- dataset$y
y.hat <- a + ((b-a)/(1 + exp((c-x)/d)))
RSS <- sum((y - y.hat)^2)
return(RSS)
}
subject7 <- df %>%
dplyr::filter(subject == '7') %>%
dplyr::select('x' = target.frames, 'y' = correct, pas)
par1 <- optim(par = c(0.5, 1, 1, 1),
fn = RSS,
data = filter(subject7, pas == '1'),
method = 'L-BFGS-B',
lower = c(0.5, 0.5, -Inf, -Inf),
upper = c(1, 1, Inf, Inf))
par2 <- optim(par = c(0.5, 1, 1, 1),
fn = RSS,
data = filter(subject7, pas == '2'),
method = 'L-BFGS-B',
lower = c(0.5, 0.5, -Inf, -Inf),
upper = c(1, 1, Inf, Inf))
par3 <- optim(par = c(0.5, 1, 1, 1),
fn = RSS,
data = filter(subject7, pas == '3'),
method = 'L-BFGS-B',
lower = c(0.5, 0.5, -Inf, -Inf),
upper = c(1, 1, Inf, Inf))
par4 <- optim(par = c(0.5, 1, 1, 1),
fn = RSS,
data = filter(subject7, pas == '4'),
method = 'L-BFGS-B',
lower = c(0.5, 0.5, -Inf, -Inf),
upper = c(1, 1, Inf, Inf))
newdf <- data.frame(cbind('x' = seq(0, 8, by = 0.01)))
newdf$yhat1 <- par1$par[1] + ((par1$par[2]-par1$par[1])/(1 + exp((par1$par[3]-newdf$x)/par1$par[4])))
newdf$yhat2 <- par2$par[1] + ((par2$par[2]-par2$par[1])/(1 + exp((par2$par[3]-newdf$x)/par2$par[4])))
newdf$yhat3 <- par3$par[1] + ((par3$par[2]-par3$par[1])/(1 + exp((par3$par[3]-newdf$x)/par3$par[4])))
newdf$yhat4 <- par4$par[1] + ((par4$par[2]-par4$par[1])/(1 + exp((par4$par[3]-newdf$x)/par4$par[4])))
ggplot(newdf) + #plotting
geom_line(aes(x = x, y = yhat1), color = 'blue') +
geom_line(aes(x = x, y = yhat2), color = 'green') +
geom_line(aes(x = x, y = yhat3), color = 'red') +
geom_line(aes(x = x, y = yhat4), color = 'orange') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
ggplot(newdf) + #plotting
geom_line(aes(x = x, y = yhat1, color = 'blue')) +
geom_line(aes(x = x, y = yhat2, color = 'green')) +
geom_line(aes(x = x, y = yhat3, color = 'red')) +
geom_line(aes(x = x, y = yhat4, color = 'orange')) +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
ggplot(newdf) + #plotting
geom_line(aes(x = x, y = yhat1, color = 'Pas 1')) +
geom_line(aes(x = x, y = yhat2, color = 'Pas 2')) +
geom_line(aes(x = x, y = yhat3, color = 'Pas 3')) +
geom_line(aes(x = x, y = yhat4, color = 'Pas 4')) +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
newdat <- data.frame(cbind('target.frames' = seq(0, 8, by = 0.001), 'pas' = rep(1:4), 'subject' = rep('7')))
newdat$subject <- as.factor(newdat$subject)
newdat$pas <- as.factor(newdat$pas)
newdat$target.frames <- as.numeric(newdat$target.frames)
newdat$yhat <- inv.logit(predict(mInt, newdata = newdat, re.form=NA))
newdat <- data.frame(cbind('target.frames' = seq(0, 8, by = 0.001), 'pas' = rep(1:4), 'subject' = rep('7')))
newdat$subject <- as.factor(newdat$subject)
newdat$pas <- as.factor(newdat$pas)
newdat$target.frames <- as.numeric(newdat$target.frames)
newdat$yhat <- inv.logit(predict(pas_m_int, newdata = newdat)
ggplot(newdat) +
newdat <- data.frame(cbind('target.frames' = seq(0, 8, by = 0.001), 'pas' = rep(1:4), 'subject' = rep('7')))
newdat$subject <- as.factor(newdat$subject)
newdat$pas <- as.factor(newdat$pas)
newdat$target.frames <- as.numeric(newdat$target.frames)
newdat$yhat <- inv.logit(predict(pas_m_int, newdata = newdat))
ggplot(newdat) +
geom_point(aes(x = target.frames, y = yhat), color = 'blue') +
facet_wrap(~pas)+
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
newdat <- data.frame(cbind('target.frames' = seq(0, 8, by = 0.001), 'pas' = rep(1:4), 'subject' = rep('7')))
newdat$subject <- as.factor(newdat$subject)
newdat$pas <- as.factor(newdat$pas)
newdat$target.frames <- as.numeric(newdat$target.frames)
newdat$yhat <- inv.logit(predict(pas_m_int, newdata = newdat))
ggplot(newdat) +
geom_line(aes(x = target.frames, y = yhat), color = 'blue') +
facet_wrap(~pas)+
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
ggplot(newdat) +
geom_line(aes(x = target.frames, y = yhat, color = pas)) +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
par <- c(0.5, 1, 1, 1)
fn <- RSS
method = 'L-BFGS-B'
lower = c(0.5, 0.5, -Inf, -Inf)
upper = c(1, 1, Inf, Inf)
loop.df <- df %>%
mutate(x = target.frames,
y = correct,
subject = as.numeric(subject),
pas = as.numeric(pas))
n <- 0
output <- data.frame(subject=character(),
pas=integer(),
a=integer(),
b=integer(),
c=integer(),
d=integer())
for (i in 1:29) {
for (n in 1:4) {
subject.df <- loop.df %>%
filter(subject == i & pas == n)
optimated <- optim(par = par,
data = subject.df,
fn = fn,
method = method,
lower = lower,
upper =  upper)
optimated.output <- data.frame(subject=i,
pas=n,
a=optimated$par[1],
b=optimated$par[2],
c=optimated$par[3],
d=optimated$par[4])
output <- rbind(output, optimated.output)
}
}
summarised.output <- output %>%
group_by(pas) %>%
summarise(mean.a=mean(a), mean.b=mean(b), mean.c=mean(c), mean.d=mean(d))
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color = 'blue') +
geom_line(aes(x = x, y = yhat2), color = 'green') +
geom_line(aes(x = x, y = yhat3), color = 'red') +
geom_line(aes(x = x, y = yhat4), color = 'orange') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1, color=pas)) +
geom_line(aes(x = x, y = yhat2, color = pas)) +
geom_line(aes(x = x, y = yhat3, color = pas)) +
geom_line(aes(x = x, y = yhat4, color = pas)) +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
summarised.output <- output %>%
group_by(pas) %>%
summarise(mean.a=mean(a), mean.b=mean(b), mean.c=mean(c), mean.d=mean(d))
plotdf <- data.frame(cbind('x' = seq(0, 8, by = 0.01)))
plotdf$yhat1 <- summarised_output$mean.a[1] + ((summarised_output$mean.b[1]-summarised_output$mean.a[1])/(1 + exp(summarised_output$mean.c[1]-plotdf$x)/summarised_output$mean.d[1]))
summarised_output <- output %>%
group_by(pas) %>%
summarise(mean.a=mean(a), mean.b=mean(b), mean.c=mean(c), mean.d=mean(d))
plotdf <- data.frame(cbind('x' = seq(0, 8, by = 0.01)))
plotdf$yhat1 <- summarised_output$mean.a[1] + ((summarised_output$mean.b[1]-summarised_output$mean.a[1])/(1 + exp(summarised_output$mean.c[1]-plotdf$x)/summarised_output$mean.d[1]))
plotdf$yhat2 <- summarised_output$mean.a[2] + ((summarised_output$mean.b[2]-summarised_output$mean.a[2])/(1 + exp(summarised_output$mean.c[2]-plotdf$x)/summarised_output$mean.d[2]))
plotdf$yhat3 <- summarised_output$mean.a[3] + ((summarised_output$mean.b[3]-summarised_output$mean.a[3])/(1 + exp(summarised_output$mean.c[3]-plotdf$x)/summarised_output$mean.d[3]))
plotdf$yhat4 <- summarised_output$mean.a[4] + ((summarised_output$mean.b[4]-summarised_output$mean.a[4])/(1 + exp(summarised_output$mean.c[4]-plotdf$x)/summarised_output$mean.d[4]))
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1, color=pas)) +
geom_line(aes(x = x, y = yhat2, color = pas)) +
geom_line(aes(x = x, y = yhat3, color = pas)) +
geom_line(aes(x = x, y = yhat4, color = pas)) +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
View(plotdf)
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red2') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen1') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red2') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red2') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet2') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red2') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
max(df$subject)
mouse[["data"]][["trial_type"]]
length(unique(df$pas)
length(unique(df$pas))
length(unique(df$subject))
length(unique(df$pas))
View(subject.df)
View(optimated.output)
View(output)
# Data frame containing x, y, pas and subject
loop_df <- df %>%
dplyr::select('x' = target.frames, 'y' = correct, pas, subject)
# Empty data frame for output from every loop
output <- data.frame()
# Double loop
for (i in 1:length(unique(df$subject))){
for (n in 1:length(unique(df$pas))) {
# Creating a data frame for each participant in each pas
subject_df <- loop.df %>%
filter(subject == i & pas == n)
# Using the optim function on each subject in each pas
parameters <- optim(par = c(0.5, 1, 1, 1),
data = subject_df,
fn = RSS,
method = 'L-BFGS-B',
lower = c(0.5, 0.5, -Inf, -Inf),
upper = c(1, 1, Inf, Inf))
# Creating a data frame with subject, pas and each of the four parameters
optimated_output <- data.frame(subject = i,
pas = n,
a = parameters$par[1],
b = parameters$par[2],
c = parameters$par[3],
d = parameters$par[4])
# Row binding the data frames for each subject into the empty data
output <- rbind(output, optimated_output)
}
}
View(output)
View(summarised.output)
# Calculating yhats  using the sigmoid function
yhat_fun <- function(a, b, c, d, x){
yhat <- a+(b-a)/(1+exp((c-x)/d))
}
plotdf$yhat1 <- yhat_fun(mean_par$a[1], mean_par$b[1], mean_par$c[1], mean_par$d[1], plotdf$x)
# Finding the mean of each of the four parameters grouped by pas
mean_par <- output %>%
group_by(pas) %>%
summarise(a=mean(a), b=mean(b), c=mean(c), d=mean(d))
# Creating a data frame containing hypothetical target framea values
plotdf <- data.frame(cbind('x' = seq(0, 8, by = 0.01)))
# Calculating yhats  using the sigmoid function
yhat_fun <- function(a, b, c, d, x){
yhat <- a+(b-a)/(1+exp((c-x)/d))
}
plotdf$yhat1 <- yhat_fun(mean_par$a[1], mean_par$b[1], mean_par$c[1], mean_par$d[1], plotdf$x)
plotdf$yhat2 <- yhat_fun(mean_par$a[2], mean_par$b[2], mean_par$c[2], mean_par$d[2], plotdf$x)
plotdf$yhat3 <- yhat_fun(mean_par$a[3], mean_par$b[3], mean_par$c[3], mean_par$d[3], plotdf$x)
plotdf$yhat4 <- yhat_fun(mean_par$a[4], mean_par$b[4], mean_par$c[4], mean_par$d[4], plotdf$x)
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red2') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
theme_minimal()
# Finding the mean of each of the four parameters grouped by pas
mean_par <- output %>%
group_by(pas) %>%
summarise(a=mean(a), b=mean(b), c=mean(c), d=mean(d))
# Creating a data frame containing hypothetical target framea values
plotdf <- data.frame(cbind('x' = seq(0, 8, by = 0.0001)))
# Calculating yhats  using the sigmoid function
yhat_fun <- function(a, b, c, d, x){
yhat <- a+(b-a)/(1+exp((c-x)/d))
}
plotdf$yhat1 <- yhat_fun(mean_par$a[1], mean_par$b[1], mean_par$c[1], mean_par$d[1], plotdf$x)
plotdf$yhat2 <- yhat_fun(mean_par$a[2], mean_par$b[2], mean_par$c[2], mean_par$d[2], plotdf$x)
plotdf$yhat3 <- yhat_fun(mean_par$a[3], mean_par$b[3], mean_par$c[3], mean_par$d[3], plotdf$x)
plotdf$yhat4 <- yhat_fun(mean_par$a[4], mean_par$b[4], mean_par$c[4], mean_par$d[4], plotdf$x)
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red2') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
geom_tile('')
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
#geom_tile('')
theme_minimal()
View(mean_par)
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red') +
geom_line(aes(x = x, y = yhat2), color = 'green') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
#geom_tile('')
theme_minimal()
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red') +
geom_line(aes(x = x, y = yhat2), color = 'mossgreen') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
#geom_tile('')
theme_minimal()
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen2') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
#geom_tile('')
theme_minimal()
ggplot(plotdf) +
geom_line(aes(x = x, y = yhat1), color='red') +
geom_line(aes(x = x, y = yhat2), color = 'darkgreen') +
geom_line(aes(x = x, y = yhat3), color = 'turquoise') +
geom_line(aes(x = x, y = yhat4), color = 'violet') +
xlim(c(0, 8)) +
ylim(c(0, 1)) +
xlab('Target Frames') +
ylab('Predicted Accuracy') +
#geom_tile('')
theme_minimal()
df %>% ggplot(aes(x = target.frames, y = fitted.values(pas_m_pool), color= pas)) +
geom_line()+
geom_point(x = df$target.frames, y = fitted.values(pas_m_int))+
facet_wrap(~ pas) +
xlab("Target Frames") +
ylab("Fitted Values") +
xlim(c(0,6))+
ylim(c(0,1))+
labs(title = "Estimated group-level functions for each PAS-rating")+
theme_minimal()
# plotting
df %>% ggplot(aes(x = target.frames, y = fitted.values(pas_m_pool), color= pas)) +
geom_line()+
geom_point(x = df$target.frames, y = fitted.values(pas_m_pool))+
facet_wrap(~ pas) +
xlab("Target Frames") +
ylab("Fitted Values") +
xlim(c(0,6))+
ylim(c(0,1))+
labs(title = "Estimated group-level functions for each PAS-rating")+
theme_minimal()
df %>% ggplot(aes(x = target.frames, y = fitted.values(pas_m_pool), color= pas)) +
geom_line()+
geom_point(x = df$target.frames, y = fitted.values(pas_m_pool))+
facet_wrap(~ pas) +
xlab("Target Frames") +
ylab("Fitted Values") +
xlim(c(0,6))+
ylim(c(0,1))+
labs(title = "Estimated group-level functions for each PAS-rating")+
theme_minimal()
df %>% ggplot() +
geom_smooth(aes(x = target.frames, y = fitted.values(pool_m), color= "Complete Pooling")) +
geom_smooth(aes(x = target.frames, y = fitted.values(m5), color= "Partial Pooling")) +
facet_wrap(~ subject) +
xlab("Target Frames") +
ylab("Fitted Values") +
xlim(c(0,6))+
ylim(c(0,1))+
theme_minimal()
df %>% ggplot() +
geom_smooth(aes(x = target.frames, y = fitted.values(pool_m), color= "Complete Pooling")) +
geom_smooth(aes(x = target.frames, y = fitted.values(m5), color= "Partial Pooling")) +
facet_wrap(~ subject) +
xlab("Target Frames") +
ylab("Fitted Values") +
xlim(c(0,6))+
ylim(c(0,1))+
geom_tile('Estimated Subject-specific Functions')+
theme_minimal()
df %>% ggplot() +
geom_smooth(aes(x = target.frames, y = fitted.values(pool_m), color= "Complete Pooling")) +
geom_smooth(aes(x = target.frames, y = fitted.values(m5), color= "Partial Pooling")) +
facet_wrap(~ subject) +
xlab("Target Frames") +
ylab("Fitted Values") +
xlim(c(0,6))+
ylim(c(0,1))+
gg_title('Estimated Subject-specific Functions')+
theme_minimal()
df %>% ggplot() +
geom_smooth(aes(x = target.frames, y = fitted.values(pool_m), color= "Complete Pooling")) +
geom_smooth(aes(x = target.frames, y = fitted.values(m5), color= "Partial Pooling")) +
facet_wrap(~ subject) +
xlab("Target Frames") +
ylab("Fitted Values") +
xlim(c(0,6))+
ylim(c(0,1))+
ggtitle('Estimated Subject-specific Functions')+
theme_minimal()
summary(pas_m_int)
# Extracting estimates
model_text <- c("Intercept", "target.frames", "pas2", "pas3", "pas4", "target.frames:pas2", "target.frames:pas3", "target.frames:pas4")
betas <- m7@beta[c(1:8)]
# Extracting estimates
model_text <- c("Intercept", "target.frames", "pas2", "pas3", "pas4", "target.frames:pas2", "target.frames:pas3", "target.frames:pas4")
betas <- pas_m_int@beta[c(1:8)]
as.tibble(cbind(model_text, betas))
suma <- summarise(m5)
suma <- summary(m5)
suma$coefficients
suma <- summary(pas_m_int)
suma$coefficients
summary(pas_m_int)$coefficients
# Extracting estimates
summary(pas_m_int)$inv.logit(coefficients)
# Extracting estimates
summary(pas_m_int)$coefficients
# Extracting estimates
summary(pas_m_int)$coefficients
inv.logit(pas_m_int[1])
exp(pas_m_int[1])
pas_m_int[1]
df %>% ggplot(aes(x = target.frames, y = fitted.values(pas_m_pool), color= pas)) +
geom_line()+
xlab("Target Frames") +
ylab("Fitted Values") +
xlim(c(0,6))+
ylim(c(0,1))+
labs(title = "Estimated group-level functions for each PAS-rating")+
theme_minimal()
